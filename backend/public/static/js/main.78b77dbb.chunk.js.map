{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLoading","value","results","loading","currentProduct","title","size","content","SearchResults","handleResultSelect","e","_ref","result","_this","setState","axios","get","_id","then","data","catch","err","console","log","performSearch","searchText","map","val","_source","handleChange","name","Object","defineProperty","target","handleSearchChange","addToDB","post","error","_this2","this","_this$state","react_default","a","createElement","Container","Header","style","margin","textAlign","as","display","justifyContent","Search","onResultSelect","onSearchChange","noResultsMessage","Button","onClick","marginLeft","Grid","columns","divided","Row","Column","Card","width","Content","Meta","Description","extra","className","basic","color","height","overflow","index","key","JSON","stringify","disabled","Input","onChange","text","placeholder","position","bottom","right","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAiKeA,qNArJbC,MAAQ,CACNC,WAAW,EACXC,MAAO,GACPC,QAAS,GACTC,SAAS,EACTC,eAAgB,KAChBC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,cAAe,MAEjBC,mBAAqB,SAACC,EAADC,GAAoB,IAAdC,EAAcD,EAAdC,OACzBC,EAAKC,SAAS,CAAEX,SAAS,IACzBY,IAAMC,IAAI,qBAAqBJ,EAAOK,KACrCC,KAAM,SAAAN,GACLC,EAAKC,SAAS,CAAEb,MAAOW,EAAOP,MAAOD,eAAgBQ,EAAOO,KAAKA,SAElEC,MAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAC1BH,KAAM,WACLL,EAAKC,SAAS,CAAEX,SAAS,SAI7BqB,cAAgB,WACdT,IAAMC,IAAI,uBAAuBH,EAAKd,MAAM0B,YAC3CP,KAAM,SAAAN,GACLU,QAAQC,IAAIX,GACZA,EAAOO,KAAKA,KAAKO,IAAK,SAAAC,GAAG,OAAIA,EAAItB,MAAQsB,EAAIC,QAAQvB,QACrDQ,EAAKC,SAAS,CAAEN,cAAeI,EAAOO,KAAKA,SAE5CC,MAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,KAC1BH,KAAM,WACLL,EAAKC,SAAS,CAAEX,SAAS,SAI7B0B,aAAe,SAACC,EAAMH,GACpBd,EAAKC,SAALiB,OAAAC,EAAA,EAAAD,CAAA,GAAiBD,EAAOH,EAAIM,OAAOhC,WAGrCiC,mBAAqB,SAACjC,GACpBY,EAAKC,SAAS,CAAEW,WAAYxB,EAAMgC,OAAOhC,QACzCc,IAAMC,IAAI,6BAA6Bf,EAAMgC,OAAOhC,OACjDiB,KAAM,SAAAN,GACLU,QAAQC,IAAIX,EAAOO,KAAKA,MACxBP,EAAOO,KAAKA,KAAKO,IAAK,SAAAC,GAAG,OAAIA,EAAItB,MAAQsB,EAAIC,QAAQvB,QACrDQ,EAAKC,SAAS,CAAEZ,QAASU,EAAOO,KAAKA,SAEtCC,MAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG/Bc,QAAU,WACgB,KAArBtB,EAAKd,MAAMM,OAAuC,KAAvBQ,EAAKd,MAAMQ,SAAsC,KAApBM,EAAKd,MAAMO,MACtES,IAAMqB,KAAK,UAAW,CAAE/B,MAAOQ,EAAKd,MAAMM,MAAOE,QAASM,EAAKd,MAAMQ,QAASD,KAAMO,EAAKd,MAAMO,OAC5FY,KAAM,SAAAN,GACLU,QAAQC,IAAIX,EAAOO,MACfP,EAAOO,KAAKkB,OACdxB,EAAKC,SAAS,CAAET,MAAO,GAAIC,KAAM,GAAIC,QAAS,OAGjDa,MAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,8EAGtB,IAAAiB,EAAAC,KAAAC,EACuDD,KAAKxC,MAA3DC,EADDwC,EACCxC,UAAWE,EADZsC,EACYtC,QAASE,EADrBoC,EACqBpC,eAAgBI,EADrCgC,EACqChC,cACtCC,EAAqB8B,KAAK9B,mBAEhC,OADAa,QAAQC,IAAIf,GAEViC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,MAAO,CAAEC,OAAQ,QAAUC,UAAU,SAASC,GAAG,MAAzD,iBACAR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,MAAO,CAAEC,OAAQ,QAAUC,UAAU,SAASC,GAAG,MAAzD,8GACAR,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,OAAQ,OAAQG,QAAS,OAAQC,eAAgB,WAC7DV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEjD,QAASH,EACTqD,eAAgBd,KAAK9B,mBACrB6C,eAAgBf,KAAKL,mBACrBhC,QAASA,EACTqD,iBAAiB,cAEnBd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAASlB,KAAKf,cAAesB,MAAO,CAAEY,WAAY,KAA1D,WAEFjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,QAAQ,MAAMC,SAAO,GACzBpB,EAAAC,EAAAC,cAACgB,EAAA,EAAKG,IAAN,KACErB,EAAAC,EAAAC,cAACgB,EAAA,EAAKI,OAAN,KACAtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQG,UAAU,UAAlB,oBACET,KAAKxC,MAAMC,WAA0C,MAA7BuC,KAAKxC,MAAMK,gBACrCqC,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMlB,MAAO,CAAEmB,MAAO,SACpBxB,EAAAC,EAAAC,cAACqB,EAAA,EAAKE,QAAN,KACEzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKnB,OAAN,KAAczC,EAAeC,OAC7BoC,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,KAAN,KAAY/D,EAAeE,MAC3BmC,EAAAC,EAAAC,cAACqB,EAAA,EAAKI,YAAN,KACGhE,EAAeG,UAGpBkC,EAAAC,EAAAC,cAACqB,EAAA,EAAKE,QAAN,CAAcG,OAAK,GACjB5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,kBACb7B,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQe,OAAK,EAACC,MAAM,SAApB,mBAGA/B,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQe,OAAK,EAACC,MAAM,QAApB,gBASR/B,EAAAC,EAAAC,cAACgB,EAAA,EAAKI,OAAN,CAAajB,MAAO,CAAE2B,OAAQ,IAAKC,SAAU,SAC3CjC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQG,UAAU,UAAlB,kBACExC,EAAckB,IAAK,SAACC,EAAKgD,GACzB,OAAOlC,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAMY,IAAKjD,EAAIV,IAAK6B,MAAO,CAAEmB,MAAO,SAE3CxB,EAAAC,EAAAC,cAACqB,EAAA,EAAKE,QAAN,KAEEzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKnB,OAAN,KAAclB,EAAItB,OAEjBwE,KAAKC,UAAUnD,EAAIC,QAAQtB,OAE9BmC,EAAAC,EAAAC,cAACqB,EAAA,EAAKE,QAAN,CAAcG,OAAK,GACjB5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,kBACb7B,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,kBAAMhD,EAAmB,KAAM,CAAEG,OAAQe,KAAQoD,SAAU3E,GAAkBA,EAAea,MAAQU,EAAIV,IAAKsD,OAAK,EAACC,MAAM,QAA1I,gBAaZ/B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQG,UAAU,SAASC,GAAG,MAA9B,kBACAR,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQG,UAAU,SAASC,GAAG,MAA9B,wGACAR,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,SAAU,SAACC,GAAD,OAAU5C,EAAKT,aAAa,QAASqD,IAAOjF,MAAOsC,KAAKxC,MAAMM,MAAOyC,MAAO,CAAEC,OAAQ,QAAUoC,YAAY,UAC7H1C,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,SAAU,SAACC,GAAD,OAAU5C,EAAKT,aAAa,OAAQqD,IAAOjF,MAAOsC,KAAKxC,MAAMO,KAAMwC,MAAO,CAAEC,OAAQ,QAAUoC,YAAY,kCAC3H1C,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,SAAU,SAACC,GAAD,OAAU5C,EAAKT,aAAa,UAAWqD,IAAOjF,MAAOsC,KAAKxC,MAAMQ,QAASuC,MAAO,CAAEC,OAAQ,QAAUoC,YAAY,YACjI1C,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAASlB,KAAKJ,SAAtB,kBACFM,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEsC,SAAU,QAASC,OAAQ,OAAQC,MAAS,SAA1D,iCAlJUC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.78b77dbb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// import { Search } from 'semantic-ui-react'\nimport { Grid, Search, Container, Header, Button, Card, Input } from 'semantic-ui-react'\n\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.handleChange = this.handleChange.bind();\n  // }\n  state = {\n    isLoading: false,\n    value: '',\n    results: [],\n    loading: false,\n    currentProduct: null,\n    title: '',\n    size: '',\n    content: '',\n    SearchResults: []\n  }\n  handleResultSelect = (e, { result }) =>  {\n    this.setState({ loading: true})\n    axios.get('/fetch/product?id='+result._id)\n    .then( result => {\n      this.setState({ value: result.title, currentProduct: result.data.data });\n    })\n    .catch( err => console.log(err) )\n    .then( () => {\n      this.setState({ loading: false });\n    });\n  }\n\n  performSearch = () => {\n    axios.get('/search/normal?text='+this.state.searchText)\n    .then( result => {\n      console.log(result);\n      result.data.data.map( val => val.title = val._source.title );\n      this.setState({ SearchResults: result.data.data });\n    })\n    .catch( err => console.log(err) )\n    .then( () => {\n      this.setState({ loading: false });\n    });\n  }\n\n  handleChange = (name, val) => {\n    this.setState({ [name]: val.target.value })\n  }\n\n  handleSearchChange = (value) => {\n    this.setState({ searchText: value.target.value });\n    axios.get('/search/autocomplete?text='+value.target.value)\n      .then( result => {\n        console.log(result.data.data);\n        result.data.data.map( val => val.title = val._source.title );\n        this.setState({ results: result.data.data});\n      })\n      .catch( err => console.log(err) )\n  }\n\n  addToDB = () => {\n    if(this.state.title === '' || this.state.content === '' || this.state.size === '') return;\n    axios.post('/insert', { title: this.state.title, content: this.state.content, size: this.state.size })\n      .then( result => {\n        console.log(result.data);\n        if(!result.data.error) {\n          this.setState({ title: '', size: '', content: ''});\n        }\n      })\n      .catch( err => console.log(err) )\n  }\n\n  render() {\n    const { isLoading, results, currentProduct, SearchResults } = this.state;\n    const handleResultSelect = this.handleResultSelect;\n    console.log(SearchResults);\n    return (\n      <Container>\n          <Header style={{ margin: '10px' }} textAlign=\"center\" as='h1'>JP Tokyo 0.1a</Header>\n          <Header style={{ margin: '10px' }} textAlign=\"center\" as='h5'>This is a simple implementation of full text autocomplete search using nodejs, mongodb and elastic search.</Header>\n          <div style={{ margin: '20px', display: 'flex', justifyContent: 'center' }}>\n            <Search\n              loading={isLoading}\n              onResultSelect={this.handleResultSelect}\n              onSearchChange={this.handleSearchChange}\n              results={results}\n              noResultsMessage=\"Search DB\"\n            />\n            <Button onClick={this.performSearch} style={{ marginLeft: 10 }}>Search</Button>\n          </div>\n          <Grid columns='two' divided>\n            <Grid.Row>\n              <Grid.Column>\n              <div>\n                <Header textAlign=\"center\">Selected Result</Header>\n                {!this.state.isLoading && this.state.currentProduct != null && \n                <Card style={{ width: '100%'}}>\n                  <Card.Content>\n                    <Card.Header>{currentProduct.title}</Card.Header>\n                    <Card.Meta>{currentProduct.size}</Card.Meta>\n                    <Card.Description>\n                      {currentProduct.content}\n                    </Card.Description>\n                  </Card.Content>\n                  <Card.Content extra>\n                    <div className='ui two buttons'>\n                      <Button basic color='green'>\n                      Request a quote\n                      </Button>\n                      <Button basic color='blue'>\n                        Contact\n                      </Button>\n                    </div>\n                  </Card.Content>\n                </Card>\n                }\n              </div>\n              </Grid.Column>\n              <Grid.Column style={{ height: 300, overflow: 'auto' }}>\n                <Header textAlign=\"center\">Search Results</Header>\n                { SearchResults.map( (val, index) => {\n                  return <Card key={val._id} style={{ width: '100%'}}>\n                  \n                  <Card.Content>\n                  \n                    <Card.Header>{val.title}</Card.Header>\n                    \n                    {JSON.stringify(val._source.size)}\n                  </Card.Content>\n                  <Card.Content extra>\n                    <div className='ui two buttons'>\n                      <Button onClick={() => handleResultSelect(null, { result: val })} disabled={currentProduct && currentProduct._id === val._id} basic color='blue'>\n                      Open\n                      </Button>\n                    </div>\n                  </Card.Content>\n                </Card>\n                }\n                ) }\n                \n              </Grid.Column>\n            </Grid.Row>\n\n          </Grid>\n          <Header textAlign=\"center\" as=\"h1\">Add to mongoDB</Header>\n          <Header textAlign=\"center\" as=\"h5\">mongo-connector python plugin should automatically sync the elastic search and mongodb in background</Header>\n          <Input onChange={(text) => this.handleChange('title', text)} value={this.state.title} style={{ margin: '10px' }} placeholder='Title' />\n          <Input onChange={(text) => this.handleChange('size', text)} value={this.state.size} style={{ margin: '10px' }} placeholder='Sizes(comma seperated values)' />\n          <Input onChange={(text) => this.handleChange('content', text)} value={this.state.content} style={{ margin: '10px' }} placeholder='Content' />\n          <Button onClick={this.addToDB}>Add to mongodb</Button>\n        <div style={{ position: 'fixed', bottom: '10px', right  : '10px'}}>\n          Made by Meetesh Mehta\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}